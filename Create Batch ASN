FUNCTION zp2p_create_batch_asn.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_CXML_APPROACH) TYPE  FLAG OPTIONAL
*"     VALUE(I_ASN_DATA) TYPE  ZP2P_TT_ASN_DATA
*"     VALUE(I_PODATA) TYPE  ME_EKPO
*"  EXPORTING
*"     REFERENCE(E_BATCHDATA) TYPE  ZP2P_TT_ASN_BATCH_HUDATA
*"  TABLES
*"      T_RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"----------------------------------------------------------------------
*& User Stories : EWOW-18453                                            *
*& Work Item    : 8000005909: EWOW-22786_BUILD-ASN via CSV Part 1       *
*& Transport    : DA1K908462                                            *
*&----------------------------------------------------------------------*
*& FM to process ASN data and create SAP batches. Batches are created   *
*& before the delivery is created so that batches are avaibale in EWM   *
*& at the time of delivery creation and distribution to EWM.            *
*&----------------------------------------------------------------------*
*& Author      ¦ Date           ¦ Comment                               *
*&----------------------------------------------------------------------*
*& DEHPOPR      28-SEPT-2021       Initial                               *
*&----------------------------------------------------------------------*
*& HUHNANA      08-NOV-2022       Object Lock check                     *
*&----------------------------------------------------------------------*
*& HUHNANA      08-DEC-2023       XML->Need to create Batch by Reel ID  *
*&                                CSV->Need to create Batch by Batch ID *
*&----------------------------------------------------------------------*

  CONSTANTS: lc_mch1 TYPE tabelle VALUE 'MCH1'.

  DATA: wa_asn_data  LIKE LINE OF i_asn_data,
        wa_podata    LIKE LINE OF i_podata,
        wa_batchattr TYPE bapibatchatt,
        lv_reel_id   TYPE char70. "Ins by HUHNANA on 20231126

  DATA: lt_otab TYPE TABLE OF rmclobtx.

  FIELD-SYMBOLS: <ls_otab> TYPE rmclobtx.

  " Know reel or non reel scenario
  IF i_podata IS NOT INITIAL AND i_asn_data IS NOT INITIAL.
    SELECT matnr, xchpf FROM marc INTO TABLE @DATA(it_batchmanaged)
              FOR ALL ENTRIES IN @i_asn_data
              WHERE matnr = @i_asn_data-material.
    IF sy-subrc = 0.
      READ TABLE i_asn_data ASSIGNING FIELD-SYMBOL(<asn_data>) INDEX 1.
      IF sy-subrc = 0.
        lv_reel_id = <asn_data>-reel_id .   "Ins by HUHNANA on 20231126
        TRANSLATE lv_reel_id TO UPPER CASE. "Ins by HUHNANA on 20231126
        IF ( lv_reel_id  EQ 'XX'
        OR   lv_reel_id  EQ 'X'
        OR   lv_reel_id  IS INITIAL ).      "Mod by HUHNANA on 20231126
          lv_reel_relevant = abap_true.
        ENDIF.
      ENDIF.
    ENDIF.
    " Supplier value fromo po data
    SELECT ebeln, lifnr FROM ekko INTO TABLE @DATA(it_vendor)
      FOR ALL ENTRIES IN @i_podata
      WHERE ebeln = @i_podata-ebeln.
    IF sy-subrc NE 0.
      CLEAR: it_vendor.
    ENDIF.
    DATA: wa_vendor LIKE LINE OF it_vendor.
  ENDIF.

  "Create ASN Process Instance
  DATA(lo_process) = NEW zp2p_cl_asn_process_ibd( ). "Ins by HUHNANA

  "End of Ins by HUHNANA on 20231208
  " Check if material is reel relevant or not.
  " If not create batches according to batch in file
  IF lv_reel_relevant EQ abap_true.
    DATA(it_supplierbatch) = i_asn_data.
    SORT it_supplierbatch BY batch ASCENDING.
    DELETE ADJACENT DUPLICATES FROM it_supplierbatch COMPARING batch.
    LOOP AT it_supplierbatch INTO DATA(wa_supplierbatch).
      READ TABLE it_batchmanaged INTO DATA(wa_batchmanaged) WITH KEY matnr = wa_supplierbatch-material.
      IF sy-subrc = 0  AND wa_batchmanaged-xchpf = 'X'.
        READ TABLE i_podata INTO wa_podata WITH KEY matnr = wa_supplierbatch-material.
        IF sy-subrc = 0.
          READ TABLE it_vendor INTO wa_vendor WITH KEY ebeln = wa_podata-ebeln.
          IF sy-subrc = 0.
            wa_batchattr-vendor_no = wa_vendor-lifnr.
          ENDIF.
          CLEAR: it_bapireturn, lv_batch.
          CALL FUNCTION 'BAPI_BATCH_CREATE'
            EXPORTING
              material             = CONV matnr18( wa_supplierbatch-material )
              plant                = wa_podata-werks
              batchattributes      = wa_batchattr
              batchstoragelocation = wa_podata-lgort
            IMPORTING
              batch                = lv_batch
              batchattributes      = it_batchattr
            TABLES
              return               = it_bapireturn.
        ENDIF.
        READ TABLE it_bapireturn INTO wa_bapireturn WITH KEY type = co_error.
        IF sy-subrc = 0.

          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

          "Create Application Log in case of error
          lo_process->create_bal_log( it_return = it_bapireturn ). "Ins by HUHNANA

          "Send email
          zp2p_cl_asn_process_ibd=>send_email(                        "20221012HUHROPU
              EXPORTING
                iv_subject    = 'BAPI_BATCH_CREATE'
                it_bapireturn = it_bapireturn
            ).

          MESSAGE ID wa_bapireturn-id TYPE wa_bapireturn-type NUMBER wa_bapireturn-number
          WITH wa_bapireturn-message_v1 wa_bapireturn-message_v2
               wa_bapireturn-message_v3 wa_bapireturn-message_v4.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
        ENDIF.

        IF lv_batch IS NOT INITIAL.
          lv_objectkey(18)          = CONV matnr18( wa_supplierbatch-material ).
          lv_objectkey+18(10)       = lv_batch.
          wa_values_char-charact    = 'SUPP_BATCH_ID'.
          wa_values_char-value_char = wa_supplierbatch-batch.
          APPEND wa_values_char TO it_values_char.

          wa_nonreeldata-matnr    = wa_supplierbatch-material.
          wa_nonreeldata-werks    = wa_podata-werks.
          wa_nonreeldata-lgort    = wa_podata-lgort.
          wa_nonreeldata-batch    = lv_batch.                  " Created SAP batch
          wa_nonreeldata-hu       = wa_supplierbatch-sscc.
          wa_nonreeldata-id       = wa_supplierbatch-batch.    " Supplier batch from file
          wa_nonreeldata-quantity = wa_supplierbatch-pallet_quantity.
          APPEND wa_nonreeldata TO it_nonreeldata.

          lv_count = 0.
          DO.
            lv_count = lv_count + 1.

            SELECT SINGLE @abap_true
              FROM mcha
              INTO @lv_check
              WHERE matnr = @wa_supplierbatch-material
              AND   werks = @wa_podata-werks
              AND   charg = @lv_batch.
            IF sy-subrc = 0.
              CASE lv_check.
                WHEN abap_true.
                  CALL FUNCTION 'ENQUEUE_EMMCHA'
                    EXPORTING
                      matnr          = wa_asn_data-material
                      werks          = wa_podata-werks
                      charg          = lv_batch
                    EXCEPTIONS
                      foreign_lock   = 1
                      system_failure = 2
                      OTHERS         = 3.
                  IF sy-subrc <> 0.
                    IF lv_count LE 10.
                      CONTINUE.
                    ELSE.
                      EXIT.
                    ENDIF.
                  ELSE.
                    CALL FUNCTION 'DEQUEUE_EMMCHA'
                      EXPORTING
                        matnr = wa_asn_data-material
                        werks = wa_podata-werks
                        charg = lv_batch.
                    EXIT.
                  ENDIF.

                WHEN abap_false.
                  IF lv_count LE 10.
                    CONTINUE.
                  ELSE.
                    EXIT.
                  ENDIF.

                WHEN OTHERS.
                  EXIT.
              ENDCASE.
            ENDIF.
          ENDDO.

*** Begin of Ins by HUHNANA
          "Check Object Lock
          lv_count = 0.
          DO.
            lv_count = lv_count + 1.

            CLEAR lt_otab.
            APPEND INITIAL LINE TO lt_otab ASSIGNING <ls_otab>.
            <ls_otab>-objek(40)    = wa_supplierbatch-material.
            <ls_otab>-objek+40(10) = lv_batch.

            CALL FUNCTION 'CLOCH_OBJECT_CHECK'
              EXPORTING
                i_obtab           = lc_mch1
                called_from       = 2
                language          = sy-langu
                lock              = abap_true
                single            = abap_true
                date_of_change    = sy-datum
                i_auth_chk        = abap_false
                i_called_from_api = abap_true
              TABLES
                otab              = lt_otab
              EXCEPTIONS
                foreign_lock      = 1
                object_not_found  = 2
                system_failure    = 3
                func_missing      = 4
                OTHERS            = 5.
            IF sy-subrc EQ 0
            OR lv_count EQ 10.
              EXIT.
            ELSE.
              WAIT UP TO 1 SECONDS.
            ENDIF.
          ENDDO.
*** End of Ins by HUHNANA

          CLEAR: it_bapireturn.
          CALL FUNCTION 'BAPI_OBJCL_CHANGE'
            EXPORTING
              objectkey          = lv_objectkey
              objecttable        = co_objecttable
              classnum           = co_classnum
              classtype          = co_classtype
              status             = co_status
            TABLES
              allocvaluesnumnew  = it_values_num
              allocvaluescharnew = it_values_char
              allocvaluescurrnew = it_values_curr
              return             = it_bapireturn.

          READ TABLE it_bapireturn INTO wa_bapireturn WITH KEY type = 'E'.
          IF sy-subrc EQ 0.

            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

            "Create Application Log in case of error
            lo_process->create_bal_log( it_return = it_bapireturn ). "Ins by HUHNANA

            "Send email
            zp2p_cl_asn_process_ibd=>send_email(                        "20221012HUHROPU
                EXPORTING
                  iv_subject    = 'BAPI_OBJCL_CHANGE'
                  it_bapireturn = it_bapireturn
              ).

            MESSAGE ID wa_bapireturn-id TYPE wa_bapireturn-type NUMBER wa_bapireturn-number
          WITH wa_bapireturn-message_v1 wa_bapireturn-message_v2
               wa_bapireturn-message_v3 wa_bapireturn-message_v4.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.
          ENDIF.
          CLEAR: lv_objectkey,
                 it_values_num,  "20221012HUHNANA
                 it_values_char, "20221012HUHNANA
                 it_values_curr, "20221012HUHNANA
                 it_bapireturn.  "20221012HUHNANA
        ENDIF.
      ENDIF.
    ENDLOOP.

    " data for batchsplit and HU packing using created SAP batch
    LOOP AT i_asn_data INTO wa_asn_data.
      READ TABLE it_nonreeldata INTO wa_nonreeldata WITH KEY id = wa_asn_data-batch.
      IF sy-subrc = 0.
        wa_batch_data-matnr    = wa_asn_data-material.
        wa_batch_data-werks    = wa_podata-werks.
        wa_batch_data-lgort    = wa_podata-lgort.
        wa_batch_data-batch    = wa_nonreeldata-batch.  " pass created sap batch
        wa_batch_data-hu       = wa_asn_data-sscc.
        wa_batch_data-id       = wa_asn_data-batch.
        wa_batch_data-quantity = wa_asn_data-pallet_quantity.
        APPEND wa_batch_data TO it_batch_data.
      ENDIF.
    ENDLOOP.

    " If material is reel relevant, create batches according to reel ids
  ELSE.
    LOOP AT i_asn_data INTO wa_asn_data.
      READ TABLE it_batchmanaged INTO wa_batchmanaged WITH KEY matnr = wa_asn_data-material.
      IF sy-subrc = 0  AND wa_batchmanaged-xchpf = 'X'.
        READ TABLE i_podata INTO wa_podata WITH KEY matnr = wa_asn_data-material.
        IF sy-subrc = 0.
          READ TABLE it_vendor INTO wa_vendor WITH KEY ebeln = wa_podata-ebeln.
          IF sy-subrc = 0.
            wa_batchattr-vendor_no = wa_vendor-lifnr.
          ENDIF.
          CLEAR: it_bapireturn, lv_batch.
          CALL FUNCTION 'BAPI_BATCH_CREATE'
            EXPORTING
              material             = CONV matnr18( wa_asn_data-material )
              plant                = wa_podata-werks
              batchattributes      = wa_batchattr
              batchstoragelocation = wa_podata-lgort
            IMPORTING
              batch                = lv_batch
              batchattributes      = it_batchattr
            TABLES
              return               = it_bapireturn.
        ENDIF.
        READ TABLE it_bapireturn INTO wa_bapireturn WITH KEY type = co_error.
        IF sy-subrc = 0.

          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

          "Create Application Log in case of error
          lo_process->create_bal_log( it_return = it_bapireturn ). "Ins by HUHNANA

          "Send email
          zp2p_cl_asn_process_ibd=>send_email(                        "20221012HUHROPU
              EXPORTING
                iv_subject    = 'BAPI_BATCH_CREATE'
                it_bapireturn = it_bapireturn
            ).

          MESSAGE ID wa_bapireturn-id TYPE wa_bapireturn-type NUMBER wa_bapireturn-number
          WITH wa_bapireturn-message_v1 wa_bapireturn-message_v2
         wa_bapireturn-message_v3 wa_bapireturn-message_v4.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
        ENDIF.

        " If batch created, input the batch with characteristics
        IF lv_batch IS NOT INITIAL.
          lv_objectkey(18)          = CONV matnr18( wa_asn_data-material ).
          lv_objectkey+18(10)       = lv_batch.
          wa_values_char-charact    = 'REEL_ID' .
          wa_values_char-value_char = wa_asn_data-reel_id.
          APPEND wa_values_char TO it_values_char.
          wa_values_char-charact    = 'SUPP_BATCH_ID'.
          wa_values_char-value_char = wa_asn_data-batch.
          APPEND wa_values_char TO it_values_char.

          " Data for Batch split and Hu pack with reels and batches
          wa_batch_data-matnr    = wa_asn_data-material.
          wa_batch_data-werks    = wa_podata-werks.
          wa_batch_data-lgort    = wa_podata-lgort.
          wa_batch_data-batch    = lv_batch.
          wa_batch_data-hu       = wa_asn_data-sscc.
          wa_batch_data-id       = wa_asn_data-reel_id.
          wa_batch_data-quantity = wa_asn_data-reel_quantity.
          APPEND wa_batch_data TO it_batch_data.

          lv_count = 0.
          DO.
            lv_count = lv_count + 1.

            SELECT SINGLE @abap_true FROM mcha
              INTO @lv_check
              WHERE matnr = @wa_asn_data-material
              AND   werks = @wa_podata-werks
              AND   charg = @lv_batch.
            IF sy-subrc = 0.
              CASE lv_check.
                WHEN abap_true.
                  CALL FUNCTION 'ENQUEUE_EMMCHA'
                    EXPORTING
                      matnr          = wa_asn_data-material
                      werks          = wa_podata-werks
                      charg          = lv_batch
                    EXCEPTIONS
                      foreign_lock   = 1
                      system_failure = 2
                      OTHERS         = 3.
                  IF sy-subrc <> 0.
                    IF lv_count LE 10.
                      CONTINUE.
                    ELSE.
                      EXIT.
                    ENDIF.
                  ELSE.
                    CALL FUNCTION 'DEQUEUE_EMMCHA'
                      EXPORTING
                        matnr = wa_asn_data-material
                        werks = wa_podata-werks
                        charg = lv_batch.
                    EXIT.
                  ENDIF.

                WHEN abap_false.
                  IF lv_count LE 10.
                    CONTINUE.
                  ELSE.
                    EXIT.
                  ENDIF.
                WHEN OTHERS.
                  EXIT.
              ENDCASE.
            ENDIF.
          ENDDO.
*** Begin of Ins by HUHNANA
          "Check Object Lock
          lv_count = 0.
          DO.
            lv_count = lv_count + 1.

            CLEAR lt_otab.
            APPEND INITIAL LINE TO lt_otab ASSIGNING <ls_otab>.
            <ls_otab>-objek(40)    = wa_asn_data-material.
            <ls_otab>-objek+40(10) = lv_batch.

            CALL FUNCTION 'CLOCH_OBJECT_CHECK'
              EXPORTING
                i_obtab           = lc_mch1
                called_from       = 2
                language          = sy-langu
                lock              = abap_true
                single            = abap_true
                date_of_change    = sy-datum
                i_auth_chk        = abap_false
                i_called_from_api = abap_true
              TABLES
                otab              = lt_otab
              EXCEPTIONS
                foreign_lock      = 1
                object_not_found  = 2
                system_failure    = 3
                func_missing      = 4
                OTHERS            = 5.
            IF sy-subrc EQ 0
            OR lv_count EQ 10.
              EXIT.
            ELSE.
              WAIT UP TO 1 SECONDS.
            ENDIF.
          ENDDO.
*** End of Ins by HUHNANA

          CLEAR: it_bapireturn.

          CALL FUNCTION 'BAPI_OBJCL_CHANGE'
            EXPORTING
              objectkey          = lv_objectkey
              objecttable        = co_objecttable
              classnum           = co_classnum
              classtype          = co_classtype
              status             = co_status
            TABLES
              allocvaluesnumnew  = it_values_num
              allocvaluescharnew = it_values_char
              allocvaluescurrnew = it_values_curr
              return             = it_bapireturn.

          READ TABLE it_bapireturn INTO wa_bapireturn WITH KEY type = 'E'.
          IF sy-subrc EQ 0.

            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

            "Create Application Log in case of error
            lo_process->create_bal_log( it_return = it_bapireturn ). "Ins by HUHNANA

            "Send email
            zp2p_cl_asn_process_ibd=>send_email(                        "20221012HUHROPU
                EXPORTING
                  iv_subject    = 'BAPI_OBJCL_CHANGE'
                  it_bapireturn = it_bapireturn
              ).

            MESSAGE ID wa_bapireturn-id TYPE wa_bapireturn-type NUMBER wa_bapireturn-number
              WITH wa_bapireturn-message_v1 wa_bapireturn-message_v2
                   wa_bapireturn-message_v3 wa_bapireturn-message_v4.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.
          ENDIF.
          CLEAR: lv_objectkey,
                 it_values_num,  "20221012HUHNANA
                 it_values_char, "20221012HUHNANA
                 it_values_curr, "20221012HUHNANA
                 it_bapireturn.  "20221012HUHNANA
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  " Move created batch data to exporting parameter
  e_batchdata[] = it_batch_data[].
  REFRESH: it_batch_data.

ENDFUNCTION.
